// frontend/src/context/__tests__/reducer.test.js
import { appReducer, initialState, ACTION_TYPES } from '../AppContext';

describe('appReducer', () => {
  it('should return initial state for unknown action', () => {
    const state = appReducer(initialState, { type: 'UNKNOWN_ACTION' });
    expect(state).toEqual(initialState);
  });

  it('should handle SET_LOADING', () => {
    const action = {
      type: ACTION_TYPES.SET_LOADING,
      payload: { user: true }
    };
    const state = appReducer(initialState, action);

    expect(state.loading.user).toBe(true);
    expect(state.loading.dashboard).toBe(true); // unchanged
  });

  it('should handle SET_USER', () => {
    const user = { id: 1, name: 'Test User' };
    const action = {
      type: ACTION_TYPES.SET_USER,
      payload: user
    };
    const state = appReducer(initialState, action);

    expect(state.currentUser).toEqual(user);
    expect(state.loading.user).toBe(false);
    expect(state.errors.user).toBeNull();
  });

  it('should handle SET_DASHBOARD_DATA', () => {
    const dashboardData = { reader_id: 1, books: [] };
    const action = {
      type: ACTION_TYPES.SET_DASHBOARD_DATA,
      payload: dashboardData
    };
    const state = appReducer(initialState, action);

    expect(state.dashboardData).toEqual(dashboardData);
    expect(state.loading.dashboard).toBe(false);
    expect(state.errors.dashboard).toBeNull();
  });

  it('should handle SET_ERROR', () => {
    const action = {
      type: ACTION_TYPES.SET_ERROR,
      payload: { dashboard: 'Error message' }
    };
    const state = appReducer(initialState, action);

    expect(state.errors.dashboard).toBe('Error message');
    expect(state.loading.dashboard).toBe(false);
    expect(state.loading.user).toBe(false);
  });

  it('should handle UPDATE_SETTINGS', () => {
    const action = {
      type: ACTION_TYPES.UPDATE_SETTINGS,
      payload: { theme: 'dark' }
    };
    const state = appReducer(initialState, action);

    expect(state.settings.theme).toBe('dark');
    expect(state.settings.itemsPerPage).toBe(12); // unchanged
  });

  it('should handle RESET_ERROR', () => {
    const stateWithError = {
      ...initialState,
      errors: { dashboard: 'Error', user: null }
    };
    const action = {
      type: ACTION_TYPES.RESET_ERROR,
      payload: 'dashboard'
    };
    const state = appReducer(stateWithError, action);

    expect(state.errors.dashboard).toBeNull();
    expect(state.errors.user).toBeNull(); // unchanged
  });
});